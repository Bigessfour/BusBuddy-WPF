<Application x:Class="BusBuddy.WPF.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:BusBuddy.WPF"
             xmlns:converters="clr-namespace:BusBuddy.WPF.Converters"
             xmlns:views="clr-namespace:BusBuddy.WPF.Views"
             xmlns:bus="clr-namespace:BusBuddy.WPF.Views.Bus"
             xmlns:dashboard="clr-namespace:BusBuddy.WPF.Views.Dashboard"
             xmlns:route="clr-namespace:BusBuddy.WPF.Views.Route"
             xmlns:driver="clr-namespace:BusBuddy.WPF.Views.Driver"
             xmlns:schedule="clr-namespace:BusBuddy.WPF.Views.Schedule"
             xmlns:viewModels="clr-namespace:BusBuddy.WPF.ViewModels"
             xmlns:student="clr-namespace:BusBuddy.WPF.Views.Student"
             xmlns:fuel="clr-namespace:BusBuddy.WPF.Views.Fuel"
             xmlns:activity="clr-namespace:BusBuddy.WPF.Views.Activity"
             xmlns:maintenance="clr-namespace:BusBuddy.WPF.Views.Maintenance"
             xmlns:settings="clr-namespace:BusBuddy.WPF.Views.Settings"
             xmlns:scheduleViewModels="clr-namespace:BusBuddy.WPF.ViewModels.Schedule"
             xmlns:scheduleManagementViewModels="clr-namespace:BusBuddy.WPF.ViewModels.ScheduleManagement"
             xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
             xmlns:syncfusionskin="clr-namespace:Syncfusion.SfSkinManager;assembly=Syncfusion.SfSkinManager.WPF">
    <Application.Resources>
        <ResourceDictionary>
            <!--
            ══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
            🎨 PURE SYNCFUSION 30.1.40 THEME ENVIRONMENT — FLUENTDARK PRIMARY WITH FLUENTLIGHT FALLBACK
            ══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
            ✅ PRIMARY THEME: FluentDark (Professional dark theme optimized for productivity)
            ✅ FALLBACK THEME: FluentLight (Clean light theme for accessibility)
            ✅ SKIN MANAGER: Configured in App.xaml.cs with ApplyStylesOnApplication = true
            ✅ CONTROL THEMING: All Syncfusion controls automatically themed via SfSkinManager
            ✅ RESOURCE OPTIMIZATION: Consolidated resource dictionary with essential styles only
            ══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
            -->
            <ResourceDictionary.MergedDictionaries>
                <!-- 🎨 SYNCFUSION THEME CONFIGURATION - USING SFSKINMANAGER (RECOMMENDED FOR FLUENT THEMES) -->
                <syncfusionskin:SfSkinManager Theme="FluentDark" />
                <!-- Custom theme overrides for BusBuddy -->
                <ResourceDictionary Source="/BusBuddy.WPF;component/Resources/Themes/FluentDark.xaml" />

                <!-- 🎯 CUSTOM STYLES AND RESOURCES -->
                <!-- Custom Syncfusion styles and resources -->
                <ResourceDictionary Source="pack://application:,,,/BusBuddy.WPF;component/Resources/SyncfusionV30_ResourceDictionary.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <!-- GLOBAL CONVERTERS -->
            <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
            <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityInverseConverter" IsInverted="True" />

            <!-- CRITICAL MISSING RESOURCES: Prevent fallback warnings -->
            <SolidColorBrush x:Key="ContentForeground" Color="#FFFFFF" />
            <SolidColorBrush x:Key="TextForeground" Color="#FFFFFF" />
            <SolidColorBrush x:Key="ControlForeground" Color="#FFFFFF" />
            <SolidColorBrush x:Key="TextPrimary" Color="#FFFFFF" /> <!-- Alias for TextForeground -->
            <SolidColorBrush x:Key="BackgroundBrush" Color="#1E1E1E" />
            <SolidColorBrush x:Key="BackgroundNormalBrush" Color="#1E1E1E" />
            <SolidColorBrush x:Key="SurfaceBackground" Color="#1E1E1E" />
            <SolidColorBrush x:Key="SurfaceBorderBrush" Color="#323130" />

            <!-- GLOBAL STYLES FOR ENHANCED CONTROLS -->
            <Style x:Key="EnhancedNavigationDrawerStyle" TargetType="ContentControl">
                <Setter Property="Background" Value="{DynamicResource SurfaceBackground}" />
                <Setter Property="Foreground" Value="{DynamicResource TextPrimary}" />
                <Setter Property="Padding" Value="0" />
                <Setter Property="Margin" Value="0" />
            </Style>
            <Style x:Key="EnhancedContentControlStyle" TargetType="ContentControl">
                <Setter Property="Background" Value="{DynamicResource SurfaceBackground}" />
                <Setter Property="Foreground" Value="{DynamicResource TextPrimary}" />
                <Setter Property="HorizontalAlignment" Value="Stretch" />
                <Setter Property="VerticalAlignment" Value="Stretch" />
            </Style>
            <!--
            ===============================================================================
            THEME USAGE GUIDELINES
            ===============================================================================
            Each control should have:Theme switching is available via ThemeService.ToggleTheme()
            ===============================================================================
            -->
            <!-- ===============================================================================
            VIEWMODEL TO VIEW MAPPING — MVVM PATTERN IMPLEMENTATION
            ===============================================================================
            DataTemplates that map ViewModels to their corresponding Views
            This enables proper MVVM view rendering instead of displaying ViewModel type names
            =============================================================================== -->
            <DataTemplate DataType="{x:Type viewModels:LoadingViewModel}">
                <views:LoadingView />
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModels:DashboardViewModel}">
                <dashboard:EnhancedDashboardView />
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModels:BusManagementViewModel}">
                <bus:BusManagementView />
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModels:DriverManagementViewModel}">
                <driver:DriverManagementView />
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModels:RouteManagementViewModel}">
                <route:RouteManagementView />
            </DataTemplate>
            <DataTemplate DataType="{x:Type scheduleViewModels:ScheduleManagementViewModel}">
                <schedule:ScheduleManagementView />
            </DataTemplate>
            <DataTemplate DataType="{x:Type scheduleManagementViewModels:ScheduleViewModel}">
                <schedule:ScheduleView />
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModels:StudentManagementViewModel}">
                <student:StudentManagementView />
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModels:MaintenanceTrackingViewModel}">
                <maintenance:MaintenanceTrackingView />
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModels:FuelManagementViewModel}">
                <fuel:FuelManagementView />
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModels:ActivityLogViewModel}">
                <activity:ActivityLoggingView />
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModels:SettingsViewModel}">
                <settings:SettingsView />
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModels:StudentListViewModel}">
                <views:StudentListView />
            </DataTemplate>
            <!-- Essential converters only - minimal resource dictionary -->
            <converters:NullToBoolConverter x:Key="NullToBoolConverter" />
            <converters:InverseBooleanConverter x:Key="InverseBooleanConverter" />
            <converters:BooleanToDeprecatedForegroundConverter x:Key="BooleanToDeprecatedForegroundConverter" />
            <converters:ThemeTextConverter x:Key="ThemeTextConverter" />
            <!-- Missing Inverse Converter - Critical Fix -->
            <!-- <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityInverseConverter2" IsInverted="True"/> -->
            <!-- Status and Data Converters -->
            <converters:ActiveStatusToColorConverter x:Key="ActiveStatusToColorConverter" />
            <converters:ActiveStatusToTextConverter x:Key="ActiveStatusToTextConverter" />
            <converters:EfficiencyToColorConverter x:Key="EfficiencyToColorConverter" />
            <converters:LicenseStatusToColorConverter x:Key="LicenseStatusToColorConverter" />
            <converters:StatusToColorConverter x:Key="StatusToColorConverter" />
            <converters:StringToVisibilityConverter x:Key="StringToVisibilityConverter" />
            <converters:AvailabilityToColorConverter x:Key="AvailabilityToColorConverter" />
            <converters:LicenseExpiredConverter x:Key="LicenseExpiredConverter" />
            <converters:LicenseExpiringSoonConverter x:Key="LicenseExpiringSoonConverter" />
            <converters:DaysRemainingToColorConverter x:Key="DaysRemainingToColorConverter" />
            <!-- Additional converters commonly used in views -->
            <converters:ScheduleStatusToColorConverter x:Key="ScheduleStatusToColorConverter" />
            <!-- CRITICAL: Add missing converters to prevent local definitions -->
            <converters:ObjectToVisibilityConverter x:Key="ObjectToVisibilityConverter" />
            <converters:EnumToBooleanConverter x:Key="EnumToBooleanConverter" />
            <!-- Standard WPF converters as global resources -->
            <!-- Already defined above: <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/> -->
        </ResourceDictionary>
    </Application.Resources>
</Application>
