using System;
using System.ComponentModel;
using System.IO;
using System.Windows;
using System.Windows.Controls;
using BusBuddy.WPF.ViewModels;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;

namespace BusBuddy.WPF.Views
{
    /// <summary>
    /// Interaction logic for DashboardView.xaml
    /// </summary>
    public partial class DashboardView : UserControl
    {
        private readonly string _layoutFilePath = Path.Combine(
            Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData),
            "BusBuddy",
            "docking-layout.xml");

        private readonly ILogger<DashboardView>? _logger;

        public DashboardView()
        {
            InitializeComponent();

            // Get logger if available
            var app = Application.Current as App;
            if (app?.Services != null)
            {
                try
                {
                    _logger = app.Services.GetService<ILogger<DashboardView>>();
                }
                catch
                {
                    // Logger not available, continue without it
                }

                // Set DataContext using DI
                DataContext = app.Services.GetRequiredService<DashboardViewModel>();

                // Subscribe to ViewModel property changes
                if (DataContext is DashboardViewModel viewModel)
                {
                    viewModel.PropertyChanged += ViewModel_PropertyChanged;
                }
            }

            // Ensure the DockingManager is properly initialized
            InitializeDockingManager();
        }

        private void InitializeDockingManager()
        {
            try
            {
                // Create directory if it doesn't exist
                var directory = Path.GetDirectoryName(_layoutFilePath);
                if (!string.IsNullOrEmpty(directory) && !Directory.Exists(directory))
                {
                    Directory.CreateDirectory(directory);
                }

                // Try to load saved layout if it exists
                if (File.Exists(_layoutFilePath))
                {
                    try
                    {
                        DockingManager?.LoadDockState(_layoutFilePath);
                        _logger?.LogInformation("Loaded docking layout from {FilePath}", _layoutFilePath);
                    }
                    catch (Exception ex)
                    {
                        _logger?.LogError(ex, "Failed to load docking layout from {FilePath}", _layoutFilePath);

                        // If loading fails, delete the corrupted file
                        try
                        {
                            File.Delete(_layoutFilePath);
                            _logger?.LogInformation("Deleted corrupted docking layout file");
                        }
                        catch
                        {
                            // Ignore errors when deleting the file
                        }
                    }
                }

                // Set DockingManager properties if available
                if (DockingManager != null)
                {
                    DockingManager.UseDocumentContainer = true;
                    
                    // Note: Other properties like EnableAutoHide and DocumentCloseButtonType 
                    // are not available in the current Syncfusion version
                    
                    // Save layout on application exit
                    Application.Current.Exit += (s, e) =>
                    {
                        try
                        {
                            DockingManager.SaveDockState(_layoutFilePath);
                            _logger?.LogInformation("Saved docking layout to {FilePath}", _layoutFilePath);
                        }
                        catch (Exception ex)
                        {
                            _logger?.LogError(ex, "Failed to save docking layout to {FilePath}", _layoutFilePath);
                        }
                    };
                }
            }
            catch (Exception ex)
            {
                _logger?.LogError(ex, "Error initializing DockingManager");
            }
        }

        private void ViewModel_PropertyChanged(object? sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(DashboardViewModel.SelectedModule) &&
                DataContext is DashboardViewModel viewModel)
            {
                try
                {
                    // Activate the document by name as required by Syncfusion DockingManager
                    DockingManager?.ActivateWindow(viewModel.SelectedModule);
                    _logger?.LogInformation("Activated module: {ModuleName}", viewModel.SelectedModule);
                }
                catch (Exception ex)
                {
                    _logger?.LogError(ex, "Failed to activate module: {ModuleName}", viewModel.SelectedModule);
                }
            }
        }
    }
}
