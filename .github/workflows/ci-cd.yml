name: Bus Buddy CI/CD

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      showPreviousResults:
        description: 'Show previous workflow results'
        required: false
        default: true
        type: boolean

permissions:
  contents: read
  checks: write
  actions: read
  pull-requests: write

jobs:
  workflow-history:
    name: Previous Workflow Results
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.showPreviousResults == true
    
    steps:
    - name: Install GitHub CLI
      run: |
        if ! command -v gh &> /dev/null; then
          echo "Installing GitHub CLI..."
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            choco install gh -y
          else
            sudo apt-get update && sudo apt-get install -y gh
          fi
        else
          echo "GitHub CLI already installed."
        fi
      shell: bash
      
    - name: Check for Syncfusion License Key
      run: |
        if [ -z "${{ secrets.SYNCFUSION_LICENSE_KEY }}" ]; then
          echo "::error::SYNCFUSION_LICENSE_KEY secret is not set. Please add it in your repository settings."
          exit 1
        fi
      shell: bash
      
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get workflow run history
      id: workflow-history
      run: |
        gh api \
          repos/${{ github.repository }}/actions/runs \
          --jq '.workflow_runs[0:10]' > workflow_runs.json
          
        echo "Found $(jq '. | length' workflow_runs.json) recent workflow runs"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Process workflow history
      run: |
        echo "## Previous Workflow Run Results" >> $GITHUB_STEP_SUMMARY
        echo "| Run ID | Workflow | Status | Conclusion | Started | Duration |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|----------|--------|------------|---------|----------|" >> $GITHUB_STEP_SUMMARY
        
        while read -r run; do
          id=$(echo $run | jq -r '.id')
          name=$(echo $run | jq -r '.name')
          status=$(echo $run | jq -r '.status')
          conclusion=$(echo $run | jq -r '.conclusion')
          started=$(echo $run | jq -r '.created_at' | sed 's/T/ /g' | sed 's/Z//g')
          updated=$(echo $run | jq -r '.updated_at' | sed 's/T/ /g' | sed 's/Z//g')
          
          # Calculate duration in minutes
          started_ts=$(date -d "$started" +%s)
          updated_ts=$(date -d "$updated" +%s)
          duration=$(( (updated_ts - started_ts) / 60 ))
          
          # Format conclusion with emoji
          if [ "$conclusion" = "success" ]; then
            conclusion="✅ Success"
          elif [ "$conclusion" = "failure" ]; then
            conclusion="❌ Failure"
          elif [ "$conclusion" = "cancelled" ]; then
            conclusion="⚠️ Cancelled"
          elif [ "$conclusion" = "skipped" ]; then
            conclusion="⏭️ Skipped"
          elif [ "$conclusion" = null ]; then
            conclusion="🔄 Running"
          fi
          
          echo "| [$id](https://github.com/${{ github.repository }}/actions/runs/$id) | $name | $status | $conclusion | $started | ${duration}m |" >> $GITHUB_STEP_SUMMARY
        done < <(jq -c '.[]' workflow_runs.json)
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "For complete workflow history, visit [Actions tab](https://github.com/${{ github.repository }}/actions)" >> $GITHUB_STEP_SUMMARY
      shell: bash
      
  test:
    name: Unit Tests
    runs-on: windows-latest
    needs: [workflow-history]
    if: always() && (needs.workflow-history.result == 'success' || needs.workflow-history.result == 'skipped')
    env:
      SYNCFUSION_LICENSE_KEY: ${{ secrets.SYNCFUSION_LICENSE_KEY }}
    outputs:
      passed: ${{ steps.count-unit-tests.outputs.passed }}
      failed: ${{ steps.count-unit-tests.outputs.failed }}
      skipped: ${{ steps.count-unit-tests.outputs.skipped }}
      total: ${{ steps.count-unit-tests.outputs.total }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create appsettings.json
      run: |
        echo '{
          "Syncfusion": {
            "LicenseKey": "${{ secrets.SYNCFUSION_LICENSE_KEY }}"
          }
        }' > appsettings.json
      shell: bash

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.sln') }}
        restore-keys: ${{ runner.os }}-nuget-

    - name: Cache build output
      uses: actions/cache@v4
      with:
        path: |
          **/bin
          **/obj
        key: ${{ runner.os }}-build-${{ hashFiles('**/*.csproj', '**/*.sln') }}
        restore-keys: ${{ runner.os }}-build-

    - name: Restore dependencies
      run: dotnet restore "Bus Buddy.sln"

    - name: Build solution
      run: dotnet build "Bus Buddy.sln" --no-restore --configuration Release

    - name: Run unit tests
      run: dotnet test "Bus Buddy.sln" --no-build --configuration Release --filter "Category!=Integration" --logger "trx;LogFileName=test-results.trx" --results-directory TestResults --collect:"XPlat Code Coverage"
      id: unit-tests

    - name: Count test results
      if: always()
      id: count-unit-tests
      run: |
        $testResults = Test-Path -Path "TestResults/test-results.trx" -PathType Leaf
        if ($testResults) {
          $xml = [xml](Get-Content TestResults/test-results.trx)
          $counters = $xml.TestRun.ResultSummary.Counters
          
          "total=$($counters.total)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "passed=$($counters.passed)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "failed=$($counters.failed)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "skipped=$($counters.notExecuted)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          
          Write-Host "Test Results: $($counters.passed) passed, $($counters.failed) failed, $($counters.notExecuted) skipped"
        } else {
          "total=0" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "passed=0" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "failed=0" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "skipped=0" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          
          Write-Host "No test results found"
        }
      shell: pwsh

    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action/windows@v2
      if: always()
      with:
        files: TestResults/*.trx

    - name: Upload coverage reports
      uses: codecov/codecov-action@v5
      if: always()
      with:
        files: TestResults/*/coverage.cobertura.xml
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false
        verbose: true
        flags: unittests
        name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    runs-on: windows-latest
    needs: test
    env:
      SYNCFUSION_LICENSE_KEY: ${{ secrets.SYNCFUSION_LICENSE_KEY }}
    outputs:
      passed: ${{ steps.count-integration-tests.outputs.passed }}
      failed: ${{ steps.count-integration-tests.outputs.failed }}
      skipped: ${{ steps.count-integration-tests.outputs.skipped }}
      total: ${{ steps.count-integration-tests.outputs.total }}

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: TestPassword123!
        ports:
          - 1433:1433
        options: >-
          --health-cmd="/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P TestPassword123! -Q 'SELECT 1'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create appsettings.test.json for integration tests
      run: |
        echo '{
          "ConnectionStrings": {
            "DefaultConnection": "Server=localhost,1433;Database=BusBuddyIntegrationTest;User Id=SA;Password=TestPassword123!;TrustServerCertificate=true;Encrypt=false",
            "TestConnection": "Server=localhost,1433;Database=BusBuddyIntegrationTest;User Id=SA;Password=TestPassword123!;TrustServerCertificate=true;Encrypt=false"
          },
          "Logging": {
            "LogLevel": {
              "Default": "Information",
              "Microsoft.AspNetCore": "Warning",
              "Microsoft.EntityFrameworkCore": "Information"
            }
          },
          "TestSettings": {
            "UseInMemoryDatabase": false,
            "UseSqlServerTestDatabase": true,
            "SeedTestData": false,
            "EnableDetailedLogging": true,
            "RecreateTestDatabaseOnStartup": true
          },
          "Syncfusion": {
            "LicenseKey": "${{ secrets.SYNCFUSION_LICENSE_KEY }}"
          }
        }' > BusBuddy.Tests/appsettings.test.json
      shell: bash

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.sln') }}
        restore-keys: ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore "Bus Buddy.sln"

    - name: Build solution
      run: dotnet build "Bus Buddy.sln" --no-restore --configuration Release

    - name: Install EF Core tools
      run: dotnet tool install --global dotnet-ef

    - name: Wait for SQL Server to be ready
      run: |
        for i in {1..30}; do
          if sqlcmd -S localhost,1433 -U SA -P TestPassword123! -Q "SELECT 1" > /dev/null 2>&1; then
            echo "SQL Server is ready!"
            break
          fi
          echo "Waiting for SQL Server... ($i/30)"
          sleep 2
        done
      shell: bash

    - name: Apply database migrations
      run: dotnet ef database update --project "." --startup-project "."
      env:
        ConnectionStrings__DefaultConnection: "Server=localhost,1433;Database=BusBuddyIntegrationTest;User Id=SA;Password=TestPassword123!;TrustServerCertificate=true;Encrypt=false"

    - name: Run integration tests
      run: dotnet test "Bus Buddy.sln" --no-build --configuration Release --filter "Category=Integration" --logger "trx;LogFileName=integration-results.trx" --results-directory TestResults
      env:
        ConnectionStrings__DefaultConnection: "Server=localhost,1433;Database=BusBuddyIntegrationTest;User Id=SA;Password=TestPassword123!;TrustServerCertificate=true;Encrypt=false"
        ConnectionStrings__TestConnection: "Server=localhost,1433;Database=BusBuddyIntegrationTest;User Id=SA;Password=TestPassword123!;TrustServerCertificate=true;Encrypt=false"
      id: integration-tests

    - name: Count integration test results
      if: always()
      id: count-integration-tests
      run: |
        $testResults = Test-Path -Path "TestResults/integration-results.trx" -PathType Leaf
        if ($testResults) {
          $xml = [xml](Get-Content TestResults/integration-results.trx)
          $counters = $xml.TestRun.ResultSummary.Counters
          
          "total=$($counters.total)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "passed=$($counters.passed)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "failed=$($counters.failed)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "skipped=$($counters.notExecuted)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          
          Write-Host "Integration Test Results: $($counters.passed) passed, $($counters.failed) failed, $($counters.notExecuted) skipped"
        } else {
          "total=0" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "passed=0" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "failed=0" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "skipped=0" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          
          Write-Host "No integration test results found"
        }
      shell: pwsh

    - name: Publish integration test results
      uses: EnricoMi/publish-unit-test-result-action/windows@v2
      if: always()
      with:
        files: TestResults/*.trx

  build:
    name: Build and Publish
    needs: [test, integration-tests]
    runs-on: windows-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create appsettings.json
      run: |
        echo '{
          "Syncfusion": {
            "LicenseKey": "${{ secrets.SYNCFUSION_LICENSE_KEY }}"
          }
        }' > appsettings.json
      shell: bash

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.sln') }}
        restore-keys: ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore "Bus Buddy.sln"

    - name: Build for release
      run: dotnet build "Bus Buddy.sln" --no-restore --configuration Release

    - name: Publish application
      run: dotnet publish "Bus Buddy.csproj" --no-build --configuration Release --output ./publish --self-contained false

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: bus-buddy-release
        path: ./publish/
        retention-days: 30

  deployment-readiness:
    name: Deployment Readiness
    runs-on: windows-latest
    needs: [test, integration-tests, build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create appsettings.json
      run: |
        echo '{
          "Syncfusion": {
            "LicenseKey": "${{ secrets.SYNCFUSION_LICENSE_KEY }}"
          }
        }' > appsettings.json
      shell: bash

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.sln') }}
        restore-keys: ${{ runner.os }}-nuget-

    - name: Restore and build
      run: |
        dotnet restore "Bus Buddy.sln"
        dotnet build "Bus Buddy.sln" --no-restore --configuration Release

    - name: Run deployment readiness checks
      run: |
        Write-Host "Running deployment readiness validation..."
        $routeServiceExists = Test-Path "Services/RouteService.cs" -or (Test-Path "Services/Implementations/RouteService.cs")
        $busServiceExists = Test-Path "Services/BusService.cs" -or (Test-Path "Services/Implementations/BusService.cs")
        $syncfusionDll = (Get-ChildItem -Path "bin", "publish" -Recurse -Filter "Syncfusion.SfDataGrid.WinForms.dll" -ErrorAction SilentlyContinue).Count -gt 0
        
        Write-Host "RouteService implemented: $routeServiceExists"
        Write-Host "BusService implemented: $busServiceExists"
        Write-Host "Syncfusion SfDataGrid present: $syncfusionDll"
        Write-Host "=== Deployment Readiness Summary ==="
        Write-Host "✅ RouteService: $routeServiceExists"
        Write-Host "✅ BusService: $busServiceExists"
        Write-Host "✅ Syncfusion: $syncfusionDll"
        
        if (-not ($routeServiceExists -and $busServiceExists -and $syncfusionDll)) {
          Write-Error "Deployment readiness checks failed"
          exit 1
        }
        Write-Host "=== Ready for deployment ==="
      shell: pwsh

    - name: Create deployment summary
      run: |
        echo "## Deployment Readiness Report" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| RouteService | ✅ Complete |" >> $GITHUB_STEP_SUMMARY
        echo "| BusService | ✅ Complete |" >> $GITHUB_STEP_SUMMARY
        echo "| Syncfusion SfDataGrid | ✅ Present |" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ✅ Passing |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ✅ Passing |" >> $GITHUB_STEP_SUMMARY
        echo "| Build | ✅ Success |" >> $GITHUB_STEP_SUMMARY
      shell: bash

  workflow-summary:
    name: Workflow Summary
    if: always()
    needs: [test, integration-tests, build, deployment-readiness]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download previous test results
      uses: actions/download-artifact@v4
      with:
        pattern: "*-results*"
        path: all-results
        
    - name: Install jq
      run: sudo apt-get install -y jq
      
    - name: Generate workflow summary
      run: |
        echo "# Bus Buddy Workflow Summary" >> $GITHUB_STEP_SUMMARY
        echo "## Job Status" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        
        # Unit Tests
        if [[ "${{ needs.test.result }}" == "success" ]]; then
          echo "| Unit Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.test.result }}" == "failure" ]]; then
          echo "| Unit Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.test.result }}" == "cancelled" ]]; then
          echo "| Unit Tests | ⚠️ Cancelled |" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.test.result }}" == "skipped" ]]; then
          echo "| Unit Tests | ⏭️ Skipped |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Unit Tests | ❓ Unknown |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Integration Tests
        if [[ "${{ needs.integration-tests.result }}" == "success" ]]; then
          echo "| Integration Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.integration-tests.result }}" == "failure" ]]; then
          echo "| Integration Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.integration-tests.result }}" == "cancelled" ]]; then
          echo "| Integration Tests | ⚠️ Cancelled |" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.integration-tests.result }}" == "skipped" ]]; then
          echo "| Integration Tests | ⏭️ Skipped |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Integration Tests | ❓ Unknown |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Build
        if [[ "${{ needs.build.result }}" == "success" ]]; then
          echo "| Build | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.build.result }}" == "failure" ]]; then
          echo "| Build | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.build.result }}" == "cancelled" ]]; then
          echo "| Build | ⚠️ Cancelled |" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.build.result }}" == "skipped" ]]; then
          echo "| Build | ⏭️ Skipped |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Build | ❓ Unknown |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Deployment Readiness
        if [[ "${{ needs.deployment-readiness.result }}" == "success" ]]; then
          echo "| Deployment Readiness | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.deployment-readiness.result }}" == "failure" ]]; then
          echo "| Deployment Readiness | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.deployment-readiness.result }}" == "cancelled" ]]; then
          echo "| Deployment Readiness | ⚠️ Cancelled |" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.deployment-readiness.result }}" == "skipped" ]]; then
          echo "| Deployment Readiness | ⏭️ Skipped |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Deployment Readiness | ❓ Unknown |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Overall Status
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.integration-tests.result }}" == "success" && 
              ("${{ needs.build.result }}" == "success" || "${{ needs.build.result }}" == "skipped") && 
              ("${{ needs.deployment-readiness.result }}" == "success" || "${{ needs.deployment-readiness.result }}" == "skipped") ]]; then
          echo "| **Overall Status** | ✅ **SUCCESS** |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| **Overall Status** | ❌ **FAILURE** |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        
        # Count test results if available
        UNIT_TEST_FILES=$(find all-results -name "test-results.trx" 2>/dev/null || echo "")
        INTEGRATION_TEST_FILES=$(find all-results -name "integration-results.trx" 2>/dev/null || echo "")
        
        if [[ -n "$UNIT_TEST_FILES" || -n "$INTEGRATION_TEST_FILES" ]]; then
          echo "| Test Type | Passed | Failed | Skipped | Total |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|--------|---------|-------|" >> $GITHUB_STEP_SUMMARY
          
          # Process unit test files if they exist
          if [[ -n "$UNIT_TEST_FILES" ]]; then
            echo "Processing unit test file(s): $UNIT_TEST_FILES"
            echo "| Unit Tests | ${{ needs.test.outputs.passed || '?' }} | ${{ needs.test.outputs.failed || '?' }} | ${{ needs.test.outputs.skipped || '?' }} | ${{ needs.test.outputs.total || '?' }} |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Unit Tests | ? | ? | ? | ? |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Process integration test files if they exist
          if [[ -n "$INTEGRATION_TEST_FILES" ]]; then
            echo "Processing integration test file(s): $INTEGRATION_TEST_FILES"
            echo "| Integration Tests | ${{ needs.integration-tests.outputs.passed || '?' }} | ${{ needs.integration-tests.outputs.failed || '?' }} | ${{ needs.integration-tests.outputs.skipped || '?' }} | ${{ needs.integration-tests.outputs.total || '?' }} |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Integration Tests | ? | ? | ? | ? |" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "No test result files found." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Workflow Details" >> $GITHUB_STEP_SUMMARY
        echo "| Detail | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Workflow | ${{ github.workflow }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Run ID | [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) |" >> $GITHUB_STEP_SUMMARY
        echo "| Triggered by | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Branch | ${{ github.ref_name }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Commit | [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) |" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "For detailed results, see the [Actions tab](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
      shell: bash