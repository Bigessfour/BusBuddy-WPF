// <auto-generated />
using System;
using BusBuddy.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusBuddy.Core.Migrations
{
    [DbContext(typeof(BusBuddyDbContext))]
    partial class BusBuddyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusBuddy.Core.Models.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityId"));

                    b.Property<string>("ActivityCategory")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.Property<decimal?>("ActualCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ApprovalRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("AssignedVehicleId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasDefaultValue("Activity");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValue("");

                    b.Property<decimal?>("DestinationLatitude")
                        .HasColumnType("decimal(10,8)");

                    b.Property<decimal?>("DestinationLongitude")
                        .HasColumnType("decimal(11,8)");

                    b.Property<string>("Directions")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("DistanceMiles")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int?>("DriverId")
                        .HasColumnType("int");

                    b.Property<decimal?>("EstimatedCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<TimeSpan?>("EstimatedTravelTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("EventTime")
                        .HasColumnType("time");

                    b.Property<int?>("ExpectedPassengers")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("LeaveTime")
                        .HasColumnType("time");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("PickupLatitude")
                        .HasColumnType("decimal(10,8)");

                    b.Property<string>("PickupLocation")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("PickupLongitude")
                        .HasColumnType("decimal(11,8)");

                    b.Property<int?>("RecurringSeriesId")
                        .HasColumnType("int");

                    b.Property<string>("RequestedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<TimeSpan>("ReturnTime")
                        .HasColumnType("time");

                    b.Property<int?>("RouteId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Scheduled");

                    b.Property<int?>("StudentsCount")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ActivityId");

                    b.HasIndex("ActivityType")
                        .HasDatabaseName("IX_Activities_ActivityType");

                    b.HasIndex("ApprovalRequired")
                        .HasDatabaseName("IX_Activities_ApprovalRequired");

                    b.HasIndex("AssignedVehicleId")
                        .HasDatabaseName("IX_Activities_VehicleId");

                    b.HasIndex("Date")
                        .HasDatabaseName("IX_Activities_Date");

                    b.HasIndex("DriverId")
                        .HasDatabaseName("IX_Activities_DriverId");

                    b.HasIndex("RouteId")
                        .HasDatabaseName("IX_Activities_RouteId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Activities_Status");

                    b.HasIndex("AssignedVehicleId", "Date", "LeaveTime")
                        .HasDatabaseName("IX_Activities_VehicleSchedule");

                    b.HasIndex("Date", "LeaveTime", "EventTime")
                        .HasDatabaseName("IX_Activities_DateTimeRange");

                    b.HasIndex("DriverId", "Date", "LeaveTime")
                        .HasDatabaseName("IX_Activities_DriverSchedule");

                    b.ToTable("Activities", (string)null);
                });

            modelBuilder.Entity("BusBuddy.Core.Models.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValue("");

                    b.Property<string>("Details")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("User")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.HasKey("Id");

                    b.HasIndex("Timestamp")
                        .IsDescending()
                        .HasDatabaseName("IX_ActivityLogs_Timestamp");

                    b.ToTable("ActivityLogs", (string)null);
                });

            modelBuilder.Entity("BusBuddy.Core.Models.ActivitySchedule", b =>
                {
                    b.Property<int>("ActivityScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityScheduleId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RequestedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ScheduledDestination")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValue("");

                    b.Property<int>("ScheduledDriverId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ScheduledEventTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("ScheduledLeaveTime")
                        .HasColumnType("time");

                    b.Property<int?>("ScheduledRiders")
                        .HasColumnType("int");

                    b.Property<int>("ScheduledVehicleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<int?>("TripEventId")
                        .HasColumnType("int");

                    b.Property<string>("TripType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ActivityScheduleId");

                    b.HasIndex("ScheduledDate")
                        .HasDatabaseName("IX_ActivitySchedule_Date");

                    b.HasIndex("ScheduledDriverId")
                        .HasDatabaseName("IX_ActivitySchedule_DriverId");

                    b.HasIndex("ScheduledVehicleId")
                        .HasDatabaseName("IX_ActivitySchedule_VehicleId");

                    b.HasIndex("TripEventId");

                    b.HasIndex("TripType")
                        .HasDatabaseName("IX_ActivitySchedule_TripType");

                    b.ToTable("ActivitySchedule", (string)null);
                });

            modelBuilder.Entity("BusBuddy.Core.Models.Bus", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<string>("BusNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("CurrentOdometer")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateLastInspection")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FleetType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("FuelCapacity")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("FuelType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("GPSDeviceId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("GPSTracking")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("InsuranceExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsurancePolicyNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastServiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Make")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.Property<decimal?>("MilesPerGallon")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.Property<DateTime?>("NextMaintenanceDue")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NextMaintenanceMileage")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("SeatingCapacity")
                        .HasColumnType("int");

                    b.Property<string>("SpecialEquipment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Active");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VINNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)")
                        .HasDefaultValue("")
                        .HasColumnName("VIN");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("VehicleId");

                    b.HasIndex("BusNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Vehicles_BusNumber");

                    b.HasIndex("DateLastInspection")
                        .HasDatabaseName("IX_Vehicles_DateLastInspection");

                    b.HasIndex("FleetType")
                        .HasDatabaseName("IX_Vehicles_FleetType");

                    b.HasIndex("InsuranceExpiryDate")
                        .HasDatabaseName("IX_Vehicles_InsuranceExpiryDate");

                    b.HasIndex("LicenseNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Vehicles_LicenseNumber");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Vehicles_Status");

                    b.HasIndex("VINNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Vehicles_VINNumber");

                    b.HasIndex("Make", "Model", "Year")
                        .HasDatabaseName("IX_Vehicles_MakeModelYear");

                    b.ToTable("Vehicles", (string)null);

                    b.HasData(
                        new
                        {
                            VehicleId = 1,
                            BusNumber = "001",
                            CreatedDate = new DateTime(2025, 7, 15, 10, 31, 40, 969, DateTimeKind.Utc).AddTicks(5562),
                            GPSTracking = false,
                            LicenseNumber = "TX123456",
                            Make = "Blue Bird",
                            Model = "Vision",
                            PurchaseDate = new DateTime(2020, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 85000.00m,
                            SeatingCapacity = 72,
                            Status = "Active",
                            VINNumber = "1BAANKCL7LF123456",
                            Year = 2020
                        },
                        new
                        {
                            VehicleId = 2,
                            BusNumber = "002",
                            CreatedDate = new DateTime(2025, 7, 15, 10, 31, 40, 969, DateTimeKind.Utc).AddTicks(5607),
                            GPSTracking = false,
                            LicenseNumber = "TX654321",
                            Make = "Thomas Built",
                            Model = "Saf-T-Liner C2",
                            PurchaseDate = new DateTime(2019, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 82000.00m,
                            SeatingCapacity = 66,
                            Status = "Active",
                            VINNumber = "4DRBTAAN7KB654321",
                            Year = 2019
                        });
                });

            modelBuilder.Entity("BusBuddy.Core.Models.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DriverID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverId"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("BackgroundCheckDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("BackgroundCheckExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("DriverEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("DriverPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("DriversLicenceType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("")
                        .HasColumnName("DriversLicenseType");

                    b.Property<DateTime?>("DrugTestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DrugTestExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmergencyContactName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmergencyContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Endorsements")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LicenseClass")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("LicenseExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LicenseIssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LicenseNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MedicalRestrictions")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("PhysicalExamDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PhysicalExamExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<bool>("TrainingComplete")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Zip")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("DriverId");

                    b.HasIndex("DriverEmail")
                        .HasDatabaseName("IX_Drivers_Email");

                    b.HasIndex("DriverPhone")
                        .HasDatabaseName("IX_Drivers_Phone");

                    b.HasIndex("DriversLicenceType")
                        .HasDatabaseName("IX_Drivers_LicenseType");

                    b.HasIndex("LicenseExpiryDate")
                        .HasDatabaseName("IX_Drivers_LicenseExpiration");

                    b.HasIndex("TrainingComplete")
                        .HasDatabaseName("IX_Drivers_TrainingComplete");

                    b.ToTable("Drivers", (string)null);

                    b.HasData(
                        new
                        {
                            DriverId = 1,
                            CreatedDate = new DateTime(2025, 7, 15, 10, 31, 40, 969, DateTimeKind.Utc).AddTicks(5864),
                            DriverEmail = "john.smith@school.edu",
                            DriverName = "John Smith",
                            DriverPhone = "555-0123",
                            DriversLicenceType = "CDL",
                            Status = "Active",
                            TrainingComplete = true
                        },
                        new
                        {
                            DriverId = 2,
                            CreatedDate = new DateTime(2025, 7, 15, 10, 31, 40, 969, DateTimeKind.Utc).AddTicks(5878),
                            DriverEmail = "mary.johnson@school.edu",
                            DriverName = "Mary Johnson",
                            DriverPhone = "555-0456",
                            DriversLicenceType = "CDL",
                            Status = "Active",
                            TrainingComplete = true
                        });
                });

            modelBuilder.Entity("BusBuddy.Core.Models.Fuel", b =>
                {
                    b.Property<int>("FuelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FuelId"));

                    b.Property<DateTime>("FuelDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FuelLocation")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Gasoline");

                    b.Property<decimal?>("Gallons")
                        .HasColumnType("decimal(8,3)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("PricePerGallon")
                        .HasColumnType("decimal(8,3)");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("VehicleFueledId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleOdometerReading")
                        .HasColumnType("int");

                    b.HasKey("FuelId");

                    b.HasIndex("FuelDate")
                        .HasDatabaseName("IX_Fuel_FuelDate");

                    b.HasIndex("FuelLocation")
                        .HasDatabaseName("IX_Fuel_Location");

                    b.HasIndex("FuelType")
                        .HasDatabaseName("IX_Fuel_Type");

                    b.HasIndex("VehicleFueledId")
                        .HasDatabaseName("IX_Fuel_VehicleId");

                    b.HasIndex("VehicleFueledId", "FuelDate")
                        .HasDatabaseName("IX_Fuel_VehicleDate");

                    b.ToTable("Fuel", (string)null);
                });

            modelBuilder.Entity("BusBuddy.Core.Models.Maintenance", b =>
                {
                    b.Property<int>("MaintenanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaintenanceId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("LaborCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("LaborHours")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("MaintenanceCompleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<DateTime?>("NextServiceDue")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NextServiceOdometer")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("OdometerReading")
                        .HasColumnType("int");

                    b.Property<decimal?>("PartsCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("PartsUsed")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PerformedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Normal");

                    b.Property<decimal>("RepairCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.Property<string>("Vendor")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<bool>("Warranty")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("WarrantyExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkOrderNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MaintenanceId");

                    b.HasIndex("Date")
                        .HasDatabaseName("IX_Maintenance_Date");

                    b.HasIndex("MaintenanceCompleted")
                        .HasDatabaseName("IX_Maintenance_Type");

                    b.HasIndex("Priority")
                        .HasDatabaseName("IX_Maintenance_Priority");

                    b.HasIndex("VehicleId")
                        .HasDatabaseName("IX_Maintenance_VehicleId");

                    b.HasIndex("VehicleId", "Date")
                        .HasDatabaseName("IX_Maintenance_VehicleDate");

                    b.ToTable("Maintenance", (string)null);
                });

            modelBuilder.Entity("BusBuddy.Core.Models.Route", b =>
                {
                    b.Property<int>("RouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RouteID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RouteId"));

                    b.Property<decimal?>("AMBeginMiles")
                        .HasColumnType("decimal(10,2)");

                    b.Property<TimeSpan?>("AMBeginTime")
                        .HasColumnType("time");

                    b.Property<int?>("AMDriverId")
                        .HasColumnType("int")
                        .HasColumnName("AMDriverID");

                    b.Property<decimal?>("AMEndMiles")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("AMRiders")
                        .HasColumnType("int");

                    b.Property<int?>("AMVehicleId")
                        .HasColumnType("int")
                        .HasColumnName("AMVehicleID");

                    b.Property<string>("BusNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("Distance")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("DriverName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("EstimatedDuration")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("PMBeginMiles")
                        .HasColumnType("decimal(10,2)");

                    b.Property<TimeSpan?>("PMBeginTime")
                        .HasColumnType("time");

                    b.Property<int?>("PMDriverId")
                        .HasColumnType("int")
                        .HasColumnName("PMDriverID");

                    b.Property<decimal?>("PMEndMiles")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("PMRiders")
                        .HasColumnType("int");

                    b.Property<int?>("PMVehicleId")
                        .HasColumnType("int")
                        .HasColumnName("PMVehicleID");

                    b.Property<string>("RouteName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.Property<int?>("StopCount")
                        .HasColumnType("int");

                    b.Property<int?>("StudentCount")
                        .HasColumnType("int");

                    b.HasKey("RouteId");

                    b.HasIndex("AMDriverId")
                        .HasDatabaseName("IX_Routes_AMDriverId");

                    b.HasIndex("AMVehicleId")
                        .HasDatabaseName("IX_Routes_AMVehicleId");

                    b.HasIndex("Date")
                        .HasDatabaseName("IX_Routes_Date");

                    b.HasIndex("PMDriverId")
                        .HasDatabaseName("IX_Routes_PMDriverId");

                    b.HasIndex("PMVehicleId")
                        .HasDatabaseName("IX_Routes_PMVehicleId");

                    b.HasIndex("RouteName")
                        .HasDatabaseName("IX_Routes_RouteName");

                    b.HasIndex("Date", "RouteName")
                        .IsUnique()
                        .HasDatabaseName("IX_Routes_DateRouteName");

                    b.ToTable("Routes", (string)null);
                });

            modelBuilder.Entity("BusBuddy.Core.Models.RouteStop", b =>
                {
                    b.Property<int>("RouteStopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RouteStopId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(10,8)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(11,8)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ScheduledArrival")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("ScheduledDeparture")
                        .HasColumnType("time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("StopAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("StopDuration")
                        .HasColumnType("int");

                    b.Property<string>("StopName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<int>("StopOrder")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RouteStopId");

                    b.HasIndex("RouteId")
                        .HasDatabaseName("IX_RouteStops_RouteId");

                    b.HasIndex("RouteId", "StopOrder")
                        .HasDatabaseName("IX_RouteStops_RouteOrder");

                    b.ToTable("RouteStops", (string)null);
                });

            modelBuilder.Entity("BusBuddy.Core.Models.Schedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"));

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("BusId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleId");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ScheduleId");

                    b.HasIndex("BusId")
                        .HasDatabaseName("IX_Schedules_BusId");

                    b.HasIndex("DriverId")
                        .HasDatabaseName("IX_Schedules_DriverId");

                    b.HasIndex("RouteId")
                        .HasDatabaseName("IX_Schedules_RouteId");

                    b.HasIndex("ScheduleDate")
                        .HasDatabaseName("IX_Schedules_Date");

                    b.HasIndex("RouteId", "BusId", "DepartureTime")
                        .IsUnique()
                        .HasDatabaseName("IX_Schedules_RouteBusDeparture");

                    b.ToTable("Schedules", (string)null);
                });

            modelBuilder.Entity("BusBuddy.Core.Models.SchoolCalendar", b =>
                {
                    b.Property<int>("CalendarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CalendarId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("RoutesRequired")
                        .HasColumnType("bit");

                    b.Property<string>("SchoolYear")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CalendarId");

                    b.HasIndex("Date")
                        .HasDatabaseName("IX_SchoolCalendar_Date");

                    b.HasIndex("EventType")
                        .HasDatabaseName("IX_SchoolCalendar_EventType");

                    b.HasIndex("RoutesRequired")
                        .HasDatabaseName("IX_SchoolCalendar_RoutesRequired");

                    b.HasIndex("SchoolYear")
                        .HasDatabaseName("IX_SchoolCalendar_SchoolYear");

                    b.ToTable("SchoolCalendar", (string)null);
                });

            modelBuilder.Entity("BusBuddy.Core.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<string>("AMRoute")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Allergies")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AlternativeContact")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AlternativePhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("BusStop")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DoctorPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("DropoffAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EmergencyPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FieldTripPermission")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Grade")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("HomeAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MedicalNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Medications")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PMRoute")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParentGuardian")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("PhotoPermission")
                        .HasColumnType("bit");

                    b.Property<string>("PickupAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("School")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SpecialAccommodations")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("SpecialNeeds")
                        .HasColumnType("bit");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("StudentNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TransportationNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Zip")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("StudentId");

                    b.HasIndex("Active")
                        .HasDatabaseName("IX_Students_Active");

                    b.HasIndex("Grade")
                        .HasDatabaseName("IX_Students_Grade");

                    b.HasIndex("School")
                        .HasDatabaseName("IX_Students_School");

                    b.HasIndex("StudentName")
                        .HasDatabaseName("IX_Students_Name");

                    b.ToTable("Students", (string)null);
                });

            modelBuilder.Entity("BusBuddy.Core.Models.Trips.TripEvent", b =>
                {
                    b.Property<int>("TripEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TripEventId"));

                    b.Property<int>("AdultSupervisorCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ApprovalRequired")
                        .HasColumnType("bit");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CustomType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Destination")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("DriverId")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LeaveTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("POCEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("POCName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("POCPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("ReturnTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RouteId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialRequirements")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Scheduled");

                    b.Property<int>("StudentCount")
                        .HasColumnType("int");

                    b.Property<string>("TripNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("TripEventId");

                    b.HasIndex("ApprovalRequired")
                        .HasDatabaseName("IX_TripEvents_ApprovalRequired");

                    b.HasIndex("DriverId")
                        .HasDatabaseName("IX_TripEvents_DriverId");

                    b.HasIndex("LeaveTime")
                        .HasDatabaseName("IX_TripEvents_LeaveTime");

                    b.HasIndex("RouteId")
                        .HasDatabaseName("IX_TripEvents_RouteId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_TripEvents_Status");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_TripEvents_Type");

                    b.HasIndex("VehicleId")
                        .HasDatabaseName("IX_TripEvents_VehicleId");

                    b.HasIndex("DriverId", "LeaveTime")
                        .HasDatabaseName("IX_TripEvents_DriverSchedule");

                    b.HasIndex("VehicleId", "LeaveTime")
                        .HasDatabaseName("IX_TripEvents_VehicleSchedule");

                    b.ToTable("TripEvents", (string)null);
                });

            modelBuilder.Entity("BusBuddy.Core.Models.Activity", b =>
                {
                    b.HasOne("BusBuddy.Core.Models.Bus", "AssignedVehicle")
                        .WithMany("Activities")
                        .HasForeignKey("AssignedVehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Activities_Vehicle");

                    b.HasOne("BusBuddy.Core.Models.Driver", "Driver")
                        .WithMany("Activities")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Activities_Driver");

                    b.HasOne("BusBuddy.Core.Models.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Activities_Route");

                    b.Navigation("AssignedVehicle");

                    b.Navigation("Driver");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("BusBuddy.Core.Models.ActivitySchedule", b =>
                {
                    b.HasOne("BusBuddy.Core.Models.Driver", "ScheduledDriver")
                        .WithMany("ScheduledActivities")
                        .HasForeignKey("ScheduledDriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ActivitySchedule_Driver");

                    b.HasOne("BusBuddy.Core.Models.Bus", "ScheduledVehicle")
                        .WithMany("ScheduledActivities")
                        .HasForeignKey("ScheduledVehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ActivitySchedule_Vehicle");

                    b.HasOne("BusBuddy.Core.Models.Trips.TripEvent", "TripEvent")
                        .WithMany()
                        .HasForeignKey("TripEventId");

                    b.Navigation("ScheduledDriver");

                    b.Navigation("ScheduledVehicle");

                    b.Navigation("TripEvent");
                });

            modelBuilder.Entity("BusBuddy.Core.Models.Fuel", b =>
                {
                    b.HasOne("BusBuddy.Core.Models.Bus", "Vehicle")
                        .WithMany("FuelRecords")
                        .HasForeignKey("VehicleFueledId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Fuel_Vehicle");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("BusBuddy.Core.Models.Maintenance", b =>
                {
                    b.HasOne("BusBuddy.Core.Models.Bus", "Vehicle")
                        .WithMany("MaintenanceRecords")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Maintenance_Vehicle");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("BusBuddy.Core.Models.Route", b =>
                {
                    b.HasOne("BusBuddy.Core.Models.Driver", "AMDriver")
                        .WithMany("AMRoutes")
                        .HasForeignKey("AMDriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Routes_AMDriver");

                    b.HasOne("BusBuddy.Core.Models.Bus", "AMVehicle")
                        .WithMany("AMRoutes")
                        .HasForeignKey("AMVehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Routes_AMVehicle");

                    b.HasOne("BusBuddy.Core.Models.Driver", "PMDriver")
                        .WithMany("PMRoutes")
                        .HasForeignKey("PMDriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Routes_PMDriver");

                    b.HasOne("BusBuddy.Core.Models.Bus", "PMVehicle")
                        .WithMany("PMRoutes")
                        .HasForeignKey("PMVehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Routes_PMVehicle");

                    b.Navigation("AMDriver");

                    b.Navigation("AMVehicle");

                    b.Navigation("PMDriver");

                    b.Navigation("PMVehicle");
                });

            modelBuilder.Entity("BusBuddy.Core.Models.RouteStop", b =>
                {
                    b.HasOne("BusBuddy.Core.Models.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RouteStops_Route");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("BusBuddy.Core.Models.Schedule", b =>
                {
                    b.HasOne("BusBuddy.Core.Models.Bus", "Bus")
                        .WithMany("Schedules")
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Schedules_Bus");

                    b.HasOne("BusBuddy.Core.Models.Driver", "Driver")
                        .WithMany("Schedules")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Schedules_Driver");

                    b.HasOne("BusBuddy.Core.Models.Route", "Route")
                        .WithMany("Schedules")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Schedules_Route");

                    b.Navigation("Bus");

                    b.Navigation("Driver");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("BusBuddy.Core.Models.Trips.TripEvent", b =>
                {
                    b.HasOne("BusBuddy.Core.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_TripEvents_Driver");

                    b.HasOne("BusBuddy.Core.Models.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_TripEvents_Route");

                    b.HasOne("BusBuddy.Core.Models.Bus", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_TripEvents_Vehicle");

                    b.Navigation("Driver");

                    b.Navigation("Route");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("BusBuddy.Core.Models.Bus", b =>
                {
                    b.Navigation("AMRoutes");

                    b.Navigation("Activities");

                    b.Navigation("FuelRecords");

                    b.Navigation("MaintenanceRecords");

                    b.Navigation("PMRoutes");

                    b.Navigation("ScheduledActivities");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("BusBuddy.Core.Models.Driver", b =>
                {
                    b.Navigation("AMRoutes");

                    b.Navigation("Activities");

                    b.Navigation("PMRoutes");

                    b.Navigation("ScheduledActivities");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("BusBuddy.Core.Models.Route", b =>
                {
                    b.Navigation("Schedules");
                });
#pragma warning restore 612, 618
        }
    }
}
